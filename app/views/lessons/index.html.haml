-# Show 2 different views depending on whether Student or Teacher
-#  Teacher views Summary of all past lessons that need follow up.
-#  Student views Notes from teacher and mark as read.

%p.success= flash[:success]
%p.error= flash[:error]

.ui.large.modal#new_lesson_modal(style="display: none;")

-# STUDENT view
- if !current_user.admin
  .ui.container.stackable.centered
    %h1 Notes
    %h3
      From your teacher with
      %i.heart.icon .

    %p
      Notes count:
      = @lessons.length

    .ui.three.column.grid
      - @lessons.each do |lesson|
        .column
          .ui.fluid.card
            .content
              .header
                Class on
                = lesson.start_time.to_formatted_s(:short)
              .meta
                = time_ago_in_words(lesson.updated_at)
                ago
              .description
                %p= lesson.student_notes
            .ui.bottom.attached.button
              = link_to "Mark as read", lesson_update_path(lesson), remote: true, method: :put


- elsif current_user.admin
  -# TEACHER view
  .ui.container.stackable.centered

    %h1 After class follow up
    %h3 Mark attendance, add notes and more

    %table.ui.table.yellow
      %thead
        %tr
          %th Lesson with
          %th Date
          %th Notes to Student
          %th Private notes
          %th Manage
      %tbody
        - @lessons_to_debrief.each do |lesson|
          %tr
            %td
              = User.find(lesson.user_id).name
            %td
              = lesson.start_time.to_formatted_s(:short)
            %td
              = lesson.student_notes || "no feedback yet"
            %td
              = lesson.private_notes
            %td.ui.selectable
              = link_to "Update", edit_lesson_path(lesson), remote: true, "data-toggle" => "modal", "data-target" => "lesson_modal"

    -# Accounting flags
    %h3 Accounting flags

    %table.ui.table.orange
      %thead
        %tr
          %th Lesson with
          %th Date
          %th Paid fees?
          %th Manage
      %tbody
        - @lessons_to_debrief.each do |lesson|
          %tr.negative
            %td
              = User.find(lesson.user_id).name
            %td
              = lesson.start_time.to_formatted_s(:short)
            %td
              - if lesson.paid
                Yes
              - elsif !lesson.paid
                No
            %td.ui.selectable
              = link_to "Update", edit_lesson_path(lesson), remote: true, "data-toggle" => "modal", "data-target" => "lesson_modal"

    -# Closed cases
    %h3 Recently closed cases

    %table.ui.table.teal
      %thead
        %tr
          %th Lesson with
          %th Date
          %th Notes to Student
          %th Private notes
          %th Paid fees?
          %th Manage
      %tbody
        - @completed_lessons.each do |lesson|
          %tr
            %td
              = User.find(lesson.user_id).name
            %td
              = lesson.start_time.to_formatted_s(:short)
            %td
              = lesson.student_notes
            %td
              = lesson.private_notes
            %td
              - if lesson.paid
                Yes
              - elsif !lesson.paid
                No
            %td.ui.selectable
              = link_to "Update", edit_lesson_path(lesson), remote: true, "data-toggle" => "modal", "data-target" => "lesson_modal"
